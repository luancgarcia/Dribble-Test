@mixin text-shadow ($string) {
	text-shadow: $string;
}

@mixin box-shadow ($string) {
	-webkit-box-shadow: $string;
	-moz-box-shadow:    $string;
	box-shadow:         $string;
}

@mixin drop-shadow ($x, $y, $blur, $spread, $alpha) {
	-webkit-box-shadow:	$x $y $blur $spread rgba(0, 0, 0, $alpha);
	-moz-box-shadow:	$x $y $blur $spread rgba(0, 0, 0, $alpha);
	box-shadow:		$x $y $blur $spread rgba(0, 0, 0, $alpha);
}

@mixin inner-shadow ($x, $y, $blur, $spread, $alpha) {
	-webkit-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
	-moz-box-shadow:    inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
	box-shadow:         inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
}

@mixin box-sizing ($type) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	box-sizing:         $type;
}

@mixin border-radius($valor){
	-webkit-border-radius: $valor;
	-moz-border-radius:    $valor;
	border-radius:         $valor;
	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}

@mixin border-radiuses ($topright, $bottomright, $bottomleft, $topleft) {
	-webkit-border-top-right-radius:    $topright;
	-webkit-border-bottom-right-radius: $bottomright;
	-webkit-border-bottom-left-radius:  $bottomleft;
	-webkit-border-top-left-radius:     $topleft;

	-moz-border-radius-topright:        $topright;
	-moz-border-radius-bottomright:     $bottomright;
	-moz-border-radius-bottomleft:      $bottomleft;
	-moz-border-radius-topleft:         $topleft;

	border-top-right-radius:            $topright;
	border-bottom-right-radius:         $bottomright;
	border-bottom-left-radius:          $bottomleft;
	border-top-left-radius:             $topleft;

	-moz-background-clip:    padding; 
	-webkit-background-clip: padding-box; 
	background-clip:         padding-box; 
}

@mixin opacity ($opacity) {
	-webkit-opacity: 	$opacity;
	-moz-opacity: 		$opacity;
	opacity: 		$opacity;
}

@mixin gradient-top($rgba-start, $position-start, $rgba-end, $position-end) {
	background: -moz-linear-gradient(top, $rgba-start $position-start, $rgba-end $position-end); /* FF3.6-15 */
	background: -webkit-linear-gradient(top,  $rgba-start $position-start,$rgba-end $position-end); /* Chrome10-25,Safari5.1-6 */
	background: linear-gradient(to bottom,  $rgba-start $position-start,$rgba-end $position-end); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
	background-repeat: no-repeat;
}

@mixin gradient ($startColor, $endColor) {
	background-color: $startColor;
	background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
	background: -webkit-linear-gradient(top, $startColor, $endColor);
	background: -moz-linear-gradient(top, $startColor, $endColor);
	background: -ms-linear-gradient(top, $startColor, $endColor);
	background: -o-linear-gradient(top, $startColor, $endColor);
}

@mixin horizontal-gradient ($startColor, $startPercent, $endColor, $endPercent) {
	background: $startColor; 
	background: -moz-linear-gradient(left,  $startColor $startPercent, $endColor $endPercent); 
	background: -webkit-linear-gradient(left, $startColor $startPercent, $endColor $endPercent); 
	background: linear-gradient(to right, $startColor $startPercent, $endColor $endPercent); 
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=$startColor, endColorstr=$startColor,GradientType=1 );
}

@mixin animation ($name, $duration, $delay, $easea) {
	-webkit-animation: $name $duration $delay $ease;
	-moz-animation:    $name $duration $delay $ease;
	-ms-animation:     $name $duration $delay $ease;
}

@mixin transition ($transition) {
	-webkit-transition: $transition;  
	-moz-transition:    $transition;
	-ms-transition:     $transition; 
	-o-transition:      $transition;  
}

@mixin transform($string){
	-webkit-transform: $string;
	-moz-transform: 	 $string;
	-ms-transform: 		 $string;
	-o-transform: 		 $string;
}
@mixin scale ($factor) {
	-webkit-transform: scale($factor);
	-moz-transform: 	 scale($factor);
	-ms-transform: 		 scale($factor);
	-o-transform: 		 scale($factor);
}
@mixin rotate ($deg) {
	-webkit-transform: rotate($deg);
	-moz-transform: 	 rotate($deg);
	-ms-transform: 		 rotate($deg);
	-o-transform: 		 rotate($deg);
}

@mixin skew ($deg, $deg2) {
	-webkit-transform:   skew($deg, $deg2);
	-moz-transform: 	 skew($deg, $deg2);
	-ms-transform: 		 skew($deg, $deg2);
	-o-transform: 		 skew($deg, $deg2);
}

@mixin translate ($x, $y) {
	-webkit-transform:   translate($x, $y);
	-moz-transform: 	 translate($x, $y);
	-ms-transform: 		 translate($x, $y);
	-o-transform: 		 translate($x, $y);
}

@mixin translate3d ($x, $y, $z) {
	-webkit-transform:   translate3d($x, $y, $z);
	-moz-transform: 	 translate3d($x, $y, $z);
	-ms-transform: 		 translate3d($x, $y, $z);
	-o-transform: 		 translate3d($x, $y, $z);
}

@mixin perspective ($value) {
	-webkit-perspective: 	$value;
	-moz-perspective: 	$value;
	-ms-perspective: 	$value;
	perspective: 		$value;
}

@mixin transform-origin ($x, $y) {
	-webkit-transform-origin: $x $y;
	-moz-transform-origin:    $x $y;
	-ms-transform-origin:     $x $y;
	-o-transform-origin:      $x $y;
}
@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}